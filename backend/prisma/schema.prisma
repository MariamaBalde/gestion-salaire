generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Utilisateur {
  id           Int         @id @default(autoincrement())
  nom          String
  email        String      @unique
  motDePasse   String
  role         Role        @default(EMPLOYE)
  actif        Boolean     @default(true)
  createdAt    DateTime    @default(now())
  entrepriseId Int?
  updatedAt    DateTime    @updatedAt
  entreprise   Entreprise? @relation(fields: [entrepriseId], references: [id])
  activities   Activity[]
  createdEntreprises Entreprise[] @relation("EntrepriseCreatedBy")
  createdPayRuns PayRun[] @relation("PayRunCreatedBy")
  createdPayments Payment[] @relation("PaymentCreatedBy")

  @@index([entrepriseId], map: "Utilisateur_entrepriseId_fkey")
}

model Entreprise {
  id           Int           @id @default(autoincrement())
  nom          String
  logo         String?
  adresse      String
  devise       String        @default("XOF")
  typePeriode  TypePeriode   @default(MENSUELLE)
  createdById  Int?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  employes     Employe[]
  utilisateurs Utilisateur[]
  payRuns      PayRun[]
  activities   Activity[]
  createdBy    Utilisateur?  @relation("EntrepriseCreatedBy", fields: [createdById], references: [id])
}

model Employe {
  id                   Int         @id @default(autoincrement())
  nomComplet           String
  poste                String
  typeContrat          TypeContrat
  tauxSalaire          Float
  coordonneesBancaires String?
  actif                Boolean     @default(true)
  entrepriseId         Int
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  entreprise           Entreprise  @relation(fields: [entrepriseId], references: [id], onDelete: Cascade)
  payslips             Payslip[]

  @@index([entrepriseId], map: "Employe_entrepriseId_fkey")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  CAISSIER
  EMPLOYE
}

enum TypePeriode {
  MENSUELLE
  HEBDOMADAIRE
  JOURNALIERE
}

enum TypeContrat {
  JOURNALIER
  FIXE
  HONORAIRE
}

model PayRun {
  id          Int      @id @default(autoincrement())
  entrepriseId Int
  entreprise   Entreprise @relation(fields: [entrepriseId], references: [id], onDelete: Cascade)
  type         TypePeriode
  dateDebut    DateTime
  dateFin      DateTime
  status       PayRunStatus @default(BROUILLON)
  createdById  Int?
  createdBy    Utilisateur? @relation("PayRunCreatedBy", fields: [createdById], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  payslips     Payslip[]

  @@index([entrepriseId], map: "PayRun_entrepriseId_fkey")
}

model Payslip {
  id          Int      @id @default(autoincrement())
  payRunId    Int
  payRun      PayRun   @relation(fields: [payRunId], references: [id], onDelete: Cascade)
  employeeId  Int
  employee    Employe  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  joursTravailles Int?     // Nombre de jours travaillés (pour les journaliers)
  brut        Float
  deductions  Float    @default(0)
  net         Float
  status      PaymentStatus @default(ATTENTE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  payments    Payment[]

  @@index([payRunId], map: "Payslip_payRunId_fkey")
  @@index([employeeId], map: "Payslip_employeeId_fkey")
}

model Payment {
  id          Int      @id @default(autoincrement())
  payslipId   Int
  payslip     Payslip  @relation(fields: [payslipId], references: [id], onDelete: Cascade)
  montant     Float
  modePaiement ModePaiement
  reference   String?
  date        DateTime @default(now())
  createdById Int?
  createdBy   Utilisateur? @relation("PaymentCreatedBy", fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([payslipId], map: "Payment_payslipId_fkey")
}

enum PayRunStatus {
  BROUILLON
  APPROUVE
  CLOTURE
}

enum PaymentStatus {
  PAYE
  PARTIEL
  ATTENTE
}

enum ModePaiement {
  ESPECES
  VIREMENT_BANCAIRE
  ORANGE_MONEY
  WAVE
}

model Activity {
  id          Int      @id @default(autoincrement())
  action      String
  entityType  String   // 'ENTREPRISE', 'EMPLOYE', 'UTILISATEUR', 'PAYRUN', etc.
  entityId    Int?
  entityName  String?
  entrepriseId Int?
  entreprise  Entreprise? @relation(fields: [entrepriseId], references: [id])
  userId      Int?
  user        Utilisateur? @relation(fields: [userId], references: [id])
  details     String?  // Détails supplémentaires en JSON
  createdAt   DateTime @default(now())

  @@index([entrepriseId], map: "Activity_entrepriseId_fkey")
  @@index([userId], map: "Activity_userId_fkey")
  @@index([createdAt], map: "Activity_createdAt_idx")
}
